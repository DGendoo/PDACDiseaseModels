ylim = c(0,100),ylab = "% Tumour")
dev.off()
##################################################
library(pheatmap)
library(reshape2)
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated using Bedtools intersect. See bash script
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_CN_Final.bed",replacement = "" )
##################################################
# Cleanup and processing
names(CNVListTemp)
##################################################
Params<-read.csv("CNV_Params_PDAC_Pairs.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("TuChr","TuStart","TuEnd","TuSample","TuCN",
"PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN","GenomicOverlap")
CNVListTemp[[count]]$TuSample<-paste(names(CNVListTemp)[[count]],"_P",sep="")
CNVListTemp[[count]]$PDXSample<-paste(names(CNVListTemp)[[count]],"_X",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$TuCN[tally] == -1),
CNVListTemp[[count]]$TuCN[tally] <- NA,CNVListTemp[[count]]$TuCN[tally] <- CNVListTemp[[count]]$TuCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDXCN[tally] == -1),
CNVListTemp[[count]]$PDXCN[tally] <- NA,CNVListTemp[[count]]$PDXCN[tally] <- CNVListTemp[[count]]$PDXCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$TuCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDXEnd[rownum]-CNVListTemp[[count]]$PDXStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDXCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$TuEnd[rownum]-CNVListTemp[[count]]$TuStart[rownum])}
}
}
Ploidy_P<-Params[unique(CNVListTemp[[count]]$TuSample),]$Ploidy
Ploidy_X<-Params[unique(CNVListTemp[[count]]$PDXSample),]$Ploidy
CNVListTemp[[count]]$TuCN<-CNVListTemp[[count]]$TuCN/Ploidy_P
CNVListTemp[[count]]$PDXCN<-CNVListTemp[[count]]$PDXCN/Ploidy_X
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$TuCN - CNVListTemp[[count]]$PDXCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
##################################################
Jaccards<-NULL
for (count in 1:length(CNVList))
{
Sample<-CNVList[[count]] #Sample
#Rename the NA hits to Misses!
Sample$PDXCN[is.na(Sample$PDXCN)]<-"MISS"
Sample$TuCN[is.na(Sample$TuCN)]<-"MISS"
#Computation for Jaccard Index
TumourBasesWithCN<-sum(as.numeric(Sample$GenomicOverlap[Sample$TuCN!="MISS"]))
PDXBasesWithCN<-sum(as.numeric(Sample$GenomicOverlap[Sample$PDXCN!="MISS"]))
IntersectingBases<-sum(as.numeric(Sample$GenomicOverlap[which(Sample$Jump<= 0.25)]))
JaccardScore<-IntersectingBases/(TumourBasesWithCN + PDXBasesWithCN -IntersectingBases)
message("Jaccard Index: ",JaccardScore)
message("")
Jaccards[count]<-JaccardScore
}
Jaccards<-data.frame("Sample"=names(CNVList),"Jaccard"=Jaccards)
Jaccards
write.csv(Jaccards,file="CNV_Jaccard_PDAC.csv")
##################################################
library(pheatmap)
library(reshape2)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
colscheme<-c('#ffffff','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84')  # YellowToBlue
colscheme2<-c('#ffffff','#bababa','#ffff99','#d53e4f','#fdae61','#66c2a5','#3288bd','#542788') # Multicolor
colscheme3<-c('#ffffff','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026') # YellowToRed
colscheme4<-c('#ffffff','#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177') # PurpleHues
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated using Bedtools intersect. See bash script
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_CN_Final.bed",replacement = "" )
##################################################
# Cleanup and processing
names(CNVListTemp)
##################################################
# Params - read in ploidy etc from Celluloid
Params<-read.csv("CNV_Params_PDAC_Pairs.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
# Some cleanup
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("TuChr","TuStart","TuEnd","TuSample","TuCN",
"PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN","GenomicOverlap")
CNVListTemp[[count]]$TuSample<-paste(names(CNVListTemp)[[count]],"_P",sep="")
CNVListTemp[[count]]$PDXSample<-paste(names(CNVListTemp)[[count]],"_X",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$TuCN[tally] == -1),
CNVListTemp[[count]]$TuCN[tally] <- NA,CNVListTemp[[count]]$TuCN[tally] <- CNVListTemp[[count]]$TuCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDXCN[tally] == -1),
CNVListTemp[[count]]$PDXCN[tally] <- NA,CNVListTemp[[count]]$PDXCN[tally] <- CNVListTemp[[count]]$PDXCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$TuCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDXEnd[rownum]-CNVListTemp[[count]]$PDXStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDXCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$TuEnd[rownum]-CNVListTemp[[count]]$TuStart[rownum])}
}
}
Ploidy_P<-Params[unique(CNVListTemp[[count]]$TuSample),]$Ploidy
Ploidy_X<-Params[unique(CNVListTemp[[count]]$PDXSample),]$Ploidy
CNVListTemp[[count]]$TuCN<-CNVListTemp[[count]]$TuCN/Ploidy_P
CNVListTemp[[count]]$PDXCN<-CNVListTemp[[count]]$PDXCN/Ploidy_X
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$TuCN - CNVListTemp[[count]]$PDXCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
# Now Calculate the
ColTemplateDoubles1<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462")
ColorListDoubles1<-rep(ColTemplateDoubles1, each=3) #30 colors of 15 pairs
# Read all parameters file
CNVs<-sort(list.files(pattern = "parameters"))
CNVList<-lapply(CNVs,function(x){read.table(x,header=TRUE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "parameters_", replacement = ""))
names(CNVList)<-CNVs
names(CNVList)<-gsub(x = names(CNVList),pattern = "_526",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = ".txt",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = "Pa_",replacement = "" )
# Compress all into one table
ParamsTable<-do.call(rbind.data.frame, CNVList)
write.csv(ParamsTable,"CNV_Params_PDAC_Pairs.csv")
ParamsTable<-as.matrix(do.call(rbind.data.frame, c(CNVList[1:2],NA,CNVList[3:4],NA,CNVList[5:6],NA,
CNVList[7:8],NA,CNVList[9:10],NA,CNVList[11:12],NA,
CNVList[13:14],NA,CNVList[15:16])))
ParamsTable<-data.frame(ParamsTable)
quartz()
par(mfrow=c(2,1))
barplot(ParamsTable$Ploidy,col = ColorListDoubles1,las=2,
names.arg = rownames(ParamsTable),ylab="Ploidy",ylim=c(0,4))
abline(a = 2,b = 0,col="red",lty=2)
barplot(ParamsTable$T1*100,col = ColorListDoubles1,las=2,
ylim = c(0,100),ylab = "% Tumour")
##################################################
library(pheatmap)
library(reshape2)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
colscheme<-c('#ffffff','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84')  # YellowToBlue
colscheme2<-c('#ffffff','#bababa','#ffff99','#d53e4f','#fdae61','#66c2a5','#3288bd','#542788') # Multicolor
colscheme3<-c('#ffffff','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026') # YellowToRed
colscheme4<-c('#ffffff','#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177') # PurpleHues
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated using Bedtools intersect. See bash script
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_CN_Final.bed",replacement = "" )
##################################################
# Params - read in ploidy etc from Celluloid
Params<-read.csv("CNV_Params_PDAC_Pairs.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
# Some cleanup
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("TuChr","TuStart","TuEnd","TuSample","TuCN",
"PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN","GenomicOverlap")
CNVListTemp[[count]]$TuSample<-paste(names(CNVListTemp)[[count]],"_P",sep="")
CNVListTemp[[count]]$PDXSample<-paste(names(CNVListTemp)[[count]],"_X",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$TuCN[tally] == -1),
CNVListTemp[[count]]$TuCN[tally] <- NA,CNVListTemp[[count]]$TuCN[tally] <- CNVListTemp[[count]]$TuCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDXCN[tally] == -1),
CNVListTemp[[count]]$PDXCN[tally] <- NA,CNVListTemp[[count]]$PDXCN[tally] <- CNVListTemp[[count]]$PDXCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$TuCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDXEnd[rownum]-CNVListTemp[[count]]$PDXStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDXCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$TuEnd[rownum]-CNVListTemp[[count]]$TuStart[rownum])}
}
}
Ploidy_P<-Params[unique(CNVListTemp[[count]]$TuSample),]$Ploidy
Ploidy_X<-Params[unique(CNVListTemp[[count]]$PDXSample),]$Ploidy
CNVListTemp[[count]]$TuCN<-CNVListTemp[[count]]$TuCN/Ploidy_P
CNVListTemp[[count]]$PDXCN<-CNVListTemp[[count]]$PDXCN/Ploidy_X
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$TuCN - CNVListTemp[[count]]$PDXCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
# Now Calculate the Jaccard Inde
# Now Calculate the Jaccard
ConcordanceRates<-NULL
for (count in 1:length(CNVList))
{
Sample<-CNVList[[count]] #Sample
Sample$PDXCN[is.na(Sample$PDXCN)]<-"MISS"
Sample$TuCN[is.na(Sample$TuCN)]<-"MISS"
TumourSub<-Sample[,c("TuChr","TuStart","TuEnd","TuSample","TuCN")]
TumourSub<-TumourSub[TumourSub$TuCN!="MISS",]
TumourSub<-TumourSub[!duplicated(TumourSub), ]
TumourSub$IntervalLength<-TumourSub$TuEnd-TumourSub$TuStart
All_Tumour_Bases<-sum(as.numeric(TumourSub$IntervalLength))
PDXSub<-Sample[,c("PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN")]
PDXSub<-PDXSub[PDXSub$PDXCN!="MISS",]
PDXSub<-PDXSub[!duplicated(PDXSub), ]
PDXSub$IntervalLength<-PDXSub$PDXEnd-PDXSub$PDXStart
All_PDX_Bases<-sum(as.numeric(PDXSub$IntervalLength))
CommonSub<-Sample
CommonSub<-CommonSub[CommonSub$PDXCN!="MISS",]
CommonSub<-CommonSub[CommonSub$TuCN!="MISS",]
All_Common_Bases<-sum(as.numeric(CommonSub$GenomicOverlap))
IntersectingSub<-Sample[!is.na(Sample$Jump),]
Intersecting_Bases<-sum(as.numeric(IntersectingSub$GenomicOverlap[which(IntersectingSub$Jump<= 0.25)]))
ConcordanceRate<-Intersecting_Bases/(All_Tumour_Bases + All_PDX_Bases - All_Common_Bases)
message("ConcordanceRate: ",ConcordanceRate)
message("")
ConcordanceRates[count]<-ConcordanceRate
}
ConcordanceRates<-data.frame("Sample"=names(CNVList),"Concordance Rate"=ConcordanceRates)
ConcordanceRate
ConcordanceRates
##################################################
library(pheatmap)
library(reshape2)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
colscheme<-c('#ffffff','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84')  # YellowToBlue
colscheme2<-c('#ffffff','#bababa','#ffff99','#d53e4f','#fdae61','#66c2a5','#3288bd','#542788') # Multicolor
colscheme3<-c('#ffffff','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026') # YellowToRed
colscheme4<-c('#ffffff','#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177') # PurpleHues
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated using Bedtools intersect. See bash script
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_CN_Final.bed",replacement = "" )
##################################################
# Cleanup and processing
# Make sure all pairs are accounted for
# Make sure CN calls are 'true' calls (not mistaken for NA, etc)
##################################################
# Params - read in ploidy etc from Celluloid
Params<-read.csv("CNV_Params_PDAC_Pairs.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
# Some cleanup
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("TuChr","TuStart","TuEnd","TuSample","TuCN",
"PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN","GenomicOverlap")
CNVListTemp[[count]]$TuSample<-paste(names(CNVListTemp)[[count]],"_P",sep="")
CNVListTemp[[count]]$PDXSample<-paste(names(CNVListTemp)[[count]],"_X",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$TuCN[tally] == -1),
CNVListTemp[[count]]$TuCN[tally] <- NA,CNVListTemp[[count]]$TuCN[tally] <- CNVListTemp[[count]]$TuCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDXCN[tally] == -1),
CNVListTemp[[count]]$PDXCN[tally] <- NA,CNVListTemp[[count]]$PDXCN[tally] <- CNVListTemp[[count]]$PDXCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$TuCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDXEnd[rownum]-CNVListTemp[[count]]$PDXStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDXCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$TuEnd[rownum]-CNVListTemp[[count]]$TuStart[rownum])}
}
}
Ploidy_P<-Params[unique(CNVListTemp[[count]]$TuSample),]$Ploidy
Ploidy_X<-Params[unique(CNVListTemp[[count]]$PDXSample),]$Ploidy
CNVListTemp[[count]]$TuCN<-CNVListTemp[[count]]$TuCN/Ploidy_P
CNVListTemp[[count]]$PDXCN<-CNVListTemp[[count]]$PDXCN/Ploidy_X
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$TuCN - CNVListTemp[[count]]$PDXCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
# Now Calculate the Jaccard
ConcordanceRates<-NULL
for (count in 1:length(CNVList))
{
Sample<-CNVList[[count]] #Sample
Sample$PDXCN[is.na(Sample$PDXCN)]<-"MISS"
Sample$TuCN[is.na(Sample$TuCN)]<-"MISS"
TumourSub<-Sample[,c("TuChr","TuStart","TuEnd","TuSample","TuCN")]
TumourSub<-TumourSub[TumourSub$TuCN!="MISS",]
TumourSub<-TumourSub[!duplicated(TumourSub), ]
TumourSub$IntervalLength<-TumourSub$TuEnd-TumourSub$TuStart
All_Tumour_Bases<-sum(as.numeric(TumourSub$IntervalLength))
PDXSub<-Sample[,c("PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN")]
PDXSub<-PDXSub[PDXSub$PDXCN!="MISS",]
PDXSub<-PDXSub[!duplicated(PDXSub), ]
PDXSub$IntervalLength<-PDXSub$PDXEnd-PDXSub$PDXStart
All_PDX_Bases<-sum(as.numeric(PDXSub$IntervalLength))
CommonSub<-Sample
CommonSub<-CommonSub[CommonSub$PDXCN!="MISS",]
CommonSub<-CommonSub[CommonSub$TuCN!="MISS",]
All_Common_Bases<-sum(as.numeric(CommonSub$GenomicOverlap))
IntersectingSub<-Sample[!is.na(Sample$Jump),]
Intersecting_Bases<-sum(as.numeric(IntersectingSub$GenomicOverlap[which(IntersectingSub$Jump<= 0.25)]))
ConcordanceRate<-Intersecting_Bases/(All_Tumour_Bases + All_PDX_Bases - All_Common_Bases)
message("ConcordanceRate: ",ConcordanceRate)
message("")
ConcordanceRates[count]<-ConcordanceRate
}
ConcordanceRates<-data.frame("Sample"=names(CNVList),"Concordance Rate"=ConcordanceRates)
getwd()
ColTemplateDoubles1<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462")
ColorListDoubles1<-rep(ColTemplateDoubles1, each=3) #30 colors of 15 pairs
# Read all parameters file
CNVs<-sort(list.files(pattern = "parameters"))
CNVList<-lapply(CNVs,function(x){read.table(x,header=TRUE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "parameters_", replacement = ""))
names(CNVList)<-CNVs
names(CNVList)<-gsub(x = names(CNVList),pattern = "_526",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = ".txt",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = "Pa_",replacement = "" )
# Compress all into one table
ParamsTable<-do.call(rbind.data.frame, CNVList)
ParamsTable<-as.matrix(do.call(rbind.data.frame, c(CNVList[1:2],NA,CNVList[3:4],NA,CNVList[5:6],NA,
CNVList[7:8],NA,CNVList[9:10],NA,CNVList[11:12],NA,
CNVList[13:14],NA,CNVList[15:16])))
ParamsTable<-data.frame(ParamsTable)
# Plot the Tumour
quartz()
par(mfrow=c(2,1))
barplot(ParamsTable$Ploidy,col = ColorListDoubles1,las=2,
names.arg = rownames(ParamsTable),ylab="Ploidy",ylim=c(0,4))
abline(a = 2,b = 0,col="red",lty=2)
barplot(ParamsTable$T1*100,col = ColorListDoubles1,las=2,
ylim = c(0,100),ylab = "% Tumour")
##################################################
library(pheatmap)
library(reshape2)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
colscheme<-c('#ffffff','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84')  # YellowToBlue
colscheme2<-c('#ffffff','#bababa','#ffff99','#d53e4f','#fdae61','#66c2a5','#3288bd','#542788') # Multicolor
colscheme3<-c('#ffffff','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026') # YellowToRed
colscheme4<-c('#ffffff','#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177') # PurpleHues
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated using Bedtools intersect. See bash script
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_CN_Final.bed",replacement = "" )
##################################################
# Cleanup and processing
# Make sure all pairs are accounted for
# Make sure CN calls are 'true' calls (not mistaken for NA, etc)
##################################################
# Params - read in ploidy e
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
ColTemplateDoubles1<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462")
ColorListDoubles1<-rep(ColTemplateDoubles1, each=3) #30 colors of 15 pairs
# Read all parameters file
CNVs<-sort(list.files(pattern = "parameters"))
CNVList<-lapply(CNVs,function(x){read.table(x,header=TRUE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "parameters_", replacement = ""))
names(CNVList)<-CNVs
names(CNVList)<-gsub(x = names(CNVList),pattern = "_526",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = ".txt",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = "Pa_",replacement = "" )
# Compress all into one table
ParamsTable<-do.call(rbind.data.frame, CNVList)
write.csv(ParamsTable,"CNV_Params_PDAC_Pairs.csv")
ParamsTable<-as.matrix(do.call(rbind.data.frame, c(CNVList[1:2],NA,CNVList[3:4],NA,CNVList[5:6],NA,
CNVList[7:8],NA,CNVList[9:10],NA,CNVList[11:12],NA,
CNVList[13:14],NA,CNVList[15:16])))
ParamsTable<-data.frame(ParamsTable)
# Plot the Tumour & No
##################################################
library(pheatmap)
library(reshape2)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
colscheme<-c('#ffffff','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#0c2c84')  # YellowToBlue
colscheme2<-c('#ffffff','#bababa','#ffff99','#d53e4f','#fdae61','#66c2a5','#3288bd','#542788') # Multicolor
colscheme3<-c('#ffffff','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#b10026') # YellowToRed
colscheme4<-c('#ffffff','#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177') # PurpleHues
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated using Bedtools intersect. See bash script
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_CN_Final.bed",replacement = "" )
##################################################
# Cleanup and processing
# Make sure all pairs are accounted for
# Make sure CN calls are 'true' calls (not mistaken for NA, etc)
##################################################
# Params - read in ploidy etc from Celluloid
Params<-read.csv("CNV_Params_PDAC_Pairs.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
# Some cleanup
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("TuChr","TuStart","TuEnd","TuSample","TuCN",
"PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN","GenomicOverlap")
CNVListTemp[[count]]$TuSample<-paste(names(CNVListTemp)[[count]],"_P",sep="")
CNVListTemp[[count]]$PDXSample<-paste(names(CNVListTemp)[[count]],"_X",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$TuCN[tally] == -1),
CNVListTemp[[count]]$TuCN[tally] <- NA,CNVListTemp[[count]]$TuCN[tally] <- CNVListTemp[[count]]$TuCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDXCN[tally] == -1),
CNVListTemp[[count]]$PDXCN[tally] <- NA,CNVListTemp[[count]]$PDXCN[tally] <- CNVListTemp[[count]]$PDXCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$TuCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDXEnd[rownum]-CNVListTemp[[count]]$PDXStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDXCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$TuEnd[rownum]-CNVListTemp[[count]]$TuStart[rownum])}
}
}
Ploidy_P<-Params[unique(CNVListTemp[[count]]$TuSample),]$Ploidy
Ploidy_X<-Params[unique(CNVListTemp[[count]]$PDXSample),]$Ploidy
CNVListTemp[[count]]$TuCN<-CNVListTemp[[count]]$TuCN/Ploidy_P
CNVListTemp[[count]]$PDXCN<-CNVListTemp[[count]]$PDXCN/Ploidy_X
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$TuCN - CNVListTemp[[count]]$PDXCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
# Now Calculate the Jaccard
ConcordanceRates<-NULL
for (count in 1:length(CNVList))
{
Sample<-CNVList[[count]] #Sample
Sample$PDXCN[is.na(Sample$PDXCN)]<-"MISS"
Sample$TuCN[is.na(Sample$TuCN)]<-"MISS"
TumourSub<-Sample[,c("TuChr","TuStart","TuEnd","TuSample","TuCN")]
TumourSub<-TumourSub[TumourSub$TuCN!="MISS",]
TumourSub<-TumourSub[!duplicated(TumourSub), ]
TumourSub$IntervalLength<-TumourSub$TuEnd-TumourSub$TuStart
All_Tumour_Bases<-sum(as.numeric(TumourSub$IntervalLength))
PDXSub<-Sample[,c("PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN")]
PDXSub<-PDXSub[PDXSub$PDXCN!="MISS",]
PDXSub<-PDXSub[!duplicated(PDXSub), ]
PDXSub$IntervalLength<-PDXSub$PDXEnd-PDXSub$PDXStart
All_PDX_Bases<-sum(as.numeric(PDXSub$IntervalLength))
CommonSub<-Sample
CommonSub<-CommonSub[CommonSub$PDXCN!="MISS",]
CommonSub<-CommonSub[CommonSub$TuCN!="MISS",]
All_Common_Bases<-sum(as.numeric(CommonSub$GenomicOverlap))
IntersectingSub<-Sample[!is.na(Sample$Jump),]
Intersecting_Bases<-sum(as.numeric(IntersectingSub$GenomicOverlap[which(IntersectingSub$Jump<= 0.25)]))
ConcordanceRate<-Intersecting_Bases/(All_Tumour_Bases + All_PDX_Bases - All_Common_Bases)
message("ConcordanceRate: ",ConcordanceRate)
message("")
ConcordanceRates[count]<-ConcordanceRate
}
ConcordanceRates<-data.frame("Sample"=names(CNVList),"Concordance Rate"=ConcordanceRates)
ConcordanceRates
