ColTemplateDoubles1<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462")
ColorListDoubles1<-rep(ColTemplateDoubles1, each=4) #30 colors of 15 pairs
# Read all parameters file
CNVs<-sort(list.files(pattern = "parameters"))
CNVList<-lapply(CNVs,function(x){read.table(x,header=TRUE)})
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "parameters_", replacement = ""))
names(CNVList)<-CNVs
names(CNVList)<-gsub(x = names(CNVList),pattern = "_526",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = ".txt",replacement = "" )
names(CNVList)<-gsub(x = names(CNVList),pattern = "Pa_",replacement = "" )
# Compress all into one table
ParamsTable<-do.call(rbind.data.frame, CNVList)
ParamsTable<-ParamsTable[c("PCSI_0590_P","PCSI_0590_X","PCSI_0590_O","PCSI_0624_P","PCSI_0624_X","PCSI_0624_O",
"PCSI_0642_P","PCSI_0642_X","PCSI_0642_O"),]
write.csv(ParamsTable,"CNV_Params_PDAC_Trios.csv")
#Quick formatting for figures!
ParamsTable<-as.matrix(do.call(rbind.data.frame, c(CNVList[1:3],NA,CNVList[4:6],NA,CNVList[7:9])))
ParamsTable<-ParamsTable[c("PCSI_0590_P","PCSI_0590_X","PCSI_0590_O","4","PCSI_0624_P","PCSI_0624_X","PCSI_0624_O","8",
"PCSI_0642_P","PCSI_0642_X","PCSI_0642_O"),]
ParamsTable<-data.frame(ParamsTable)
# Plot the Tumour & Normal component across the pairs
pdf("MergedInfo_PDAC_Trios.pdf",height = 7)
par(mfrow=c(2,1))
barplot(ParamsTable$Ploidy,col = ColorListDoubles1,las=2,
names.arg = rownames(ParamsTable),ylab="Ploidy",ylim=c(0,4))
abline(a = 2,b = 0,col="red",lty=2)
barplot(ParamsTable$T1*100,col = ColorListDoubles1,las=2,
ylim = c(0,100),ylab = "% Tumour")
dev.off()
##################################################
library(pheatmap)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
##################################################
# Read All the files containing overlapping genomic intervals
# Files were generated u
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_XvsO_CN_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_XvsO_CN_Final.bed",replacement = "" )
names(CNVListTemp)
##################################################
Params<-read.csv("CNV_Params_PDAC_Trios.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
Params
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("PDXChr","PDXStart","PDXEnd","PDXSample","PDXCN",
"PDOChr","PDOStart","PDOEnd","PDOSample","PDOCN","GenomicOverlap")
CNVListTemp[[count]]$PDXSample<-paste(names(CNVListTemp)[[count]],"_X",sep="")
CNVListTemp[[count]]$PDOSample<-paste(names(CNVListTemp)[[count]],"_O",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDXCN[tally] == -1),
CNVListTemp[[count]]$PDXCN[tally] <- NA,CNVListTemp[[count]]$PDXCN[tally] <- CNVListTemp[[count]]$PDXCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDOCN[tally] == -1),
CNVListTemp[[count]]$PDOCN[tally] <- NA,CNVListTemp[[count]]$PDOCN[tally] <- CNVListTemp[[count]]$PDOCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$PDXCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDOEnd[rownum]-CNVListTemp[[count]]$PDOStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDOCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDXEnd[rownum]-CNVListTemp[[count]]$PDXStart[rownum])}
}
}
Ploidy_X<-Params[unique(CNVListTemp[[count]]$PDXSample),]$Ploidy
Ploidy_O<-Params[unique(CNVListTemp[[count]]$PDOSample),]$Ploidy
CNVListTemp[[count]]$PDXCN<-CNVListTemp[[count]]$PDXCN/Ploidy_X
CNVListTemp[[count]]$PDOCN<-CNVListTemp[[count]]$PDOCN/Ploidy_O
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$PDXCN - CNVListTemp[[count]]$PDOCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
##################################################
Jaccards<-NULL
for (count in 1:length(CNVList))
{
Sample<-CNVList[[count]] #Sample
#Rename the NA hits to Misses!
Sample$PDOCN[is.na(Sample$PDOCN)]<-"MISS"
Sample$PDXCN[is.na(Sample$PDXCN)]<-"MISS"
#Computation for Jaccard Index
PDXBasesWithCN<-sum(as.numeric(Sample$GenomicOverlap[Sample$PDXCN!="MISS"]))
PDOBasesWithCN<-sum(as.numeric(Sample$GenomicOverlap[Sample$PDOCN!="MISS"]))
IntersectingBases<-sum(as.numeric(Sample$GenomicOverlap[which(Sample$Jump<= 0.25)]))
JaccardScore<-IntersectingBases/(PDXBasesWithCN + PDOBasesWithCN -IntersectingBases)
message("Jaccard Index: ",JaccardScore)
message("")
Jaccards[count]<-JaccardScore
}
Jaccards<-data.frame("Sample"=names(CNVList),"Jaccard"=Jaccards)
Jaccards
##################################################
library(pheatmap)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
##################################################
# Read All the files containing overlapping genomic intervals
#########################
##################################################
library(pheatmap)
#Chromosomes!
chromosomes<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
##################################################
# Read All the files containing overlapping genomic intervals
##################################################
# First read all the overlapping genomic intervals, as generated using bedtools
CNVs<-sort(list.files(pattern = "_PvsO_CN_Final.bed"))
CNVListTemp<-lapply(CNVs,function(x){read.table(x,header=FALSE)})
CNVs
CNVs<-sapply(CNVs,function(x) gsub(x,pattern = "segments_", replacement = ""))
names(CNVListTemp)<-CNVs
names(CNVListTemp)<-gsub(x = names(CNVListTemp),pattern = "_PvsO_CN_Final.bed",replacement = "" )
names(CNVListTemp)
Params
Params$Ploidy
# Params - read in ploidy etc from Celluloid
Params<-read.csv("CNV_Params_PDAC_Trios.csv")
colnames(Params)[1]<-"Sample"
rownames(Params)<-Params$Sample
Params$Ploidy
# Some cleanup
# Some cleanup
for(count in 1:length(CNVListTemp))
{
message("Processing Pair #: ",count)
colnames(CNVListTemp[[count]])<-c("TuChr","TuStart","TuEnd","TuSample","TuCN",
"PDOChr","PDOStart","PDOEnd","PDOSample","PDOCN","GenomicOverlap")
CNVListTemp[[count]]$TuSample<-paste(names(CNVListTemp)[[count]],"_P",sep="")
CNVListTemp[[count]]$PDOSample<-paste(names(CNVListTemp)[[count]],"_O",sep="")
for (tally in 1:nrow(CNVListTemp[[count]]))
{
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$TuCN[tally] == -1),
CNVListTemp[[count]]$TuCN[tally] <- NA,CNVListTemp[[count]]$TuCN[tally] <- CNVListTemp[[count]]$TuCN[tally])
ifelse((CNVListTemp[[count]]$GenomicOverlap[tally] == 0 & CNVListTemp[[count]]$PDOCN[tally] == -1),
CNVListTemp[[count]]$PDOCN[tally] <- NA,CNVListTemp[[count]]$PDOCN[tally] <- CNVListTemp[[count]]$PDOCN[tally])
}
for (rownum in 1:nrow(CNVListTemp[[count]]))
{
if(CNVListTemp[[count]]$GenomicOverlap[rownum] == 0)
{
if(is.na(CNVListTemp[[count]]$TuCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$PDOEnd[rownum]-CNVListTemp[[count]]$PDOStart[rownum])}
if(is.na(CNVListTemp[[count]]$PDOCN[rownum]))
{ CNVListTemp[[count]]$GenomicOverlap[rownum] <- (CNVListTemp[[count]]$TuEnd[rownum]-CNVListTemp[[count]]$TuStart[rownum])}
}
}
Ploidy_P<-Params[unique(CNVListTemp[[count]]$TuSample),]$Ploidy
Ploidy_O<-Params[unique(CNVListTemp[[count]]$PDOSample),]$Ploidy
CNVListTemp[[count]]$TuCN<-CNVListTemp[[count]]$TuCN/Ploidy_P
CNVListTemp[[count]]$PDOCN<-CNVListTemp[[count]]$PDOCN/Ploidy_O
CNVListTemp[[count]]$Jump<-abs(CNVListTemp[[count]]$TuCN - CNVListTemp[[count]]$PDOCN)
}
CNVList<-CNVListTemp
rm(CNVListTemp)
############################
##################################################
# Now Calculate the Jaccard Index!!
##################################################
Jaccards<-NULL
for (count in 1:length(CNVList))
{
Sample<-CNVList[[count]] #Sample
#Rename the NA hits to Misses!
Sample$PDOCN[is.na(Sample$PDOCN)]<-"MISS"
Sample$TuCN[is.na(Sample$TuCN)]<-"MISS"
#Computation for Jaccard Index
TumourBasesWithCN<-sum(as.numeric(Sample$GenomicOverlap[Sample$TuCN!="MISS"]))
PDOBasesWithCN<-sum(as.numeric(Sample$GenomicOverlap[Sample$PDOCN!="MISS"]))
IntersectingBases<-sum(as.numeric(Sample$GenomicOverlap[which(Sample$Jump<= 0.25)]))
JaccardScore<-IntersectingBases/(TumourBasesWithCN + PDOBasesWithCN -IntersectingBases)
message("Jaccard Index: ",JaccardScore)
message("")
Jaccards[count]<-JaccardScore
}
Jaccards<-data.frame("Sample"=names(CNVList),"Jaccard"=Jaccards)
write.csv(Jaccards,"CNV_Jaccard_PDAC_Trios_TumourVsPDO.csv")
source('~/Desktop/Github_PDACDiseaseModels/CNV/Trios/CopyNumberVariation_Trios.R')
source('~/Desktop/Github_PDACDiseaseModels/CNV/Trios/CalculateConcordance_Trios_XvsO.R')
source('~/Desktop/Github_PDACDiseaseModels/CNV/Trios/CalculateConcordance_Trios_PvsO.R')
