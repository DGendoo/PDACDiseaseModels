getwd()
source('~/Desktop/Github_PDACDiseaseModels/SSM/MetastasisPairs/FINAL_STEP_1_VAF_PrimPDXpairs.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/MetastasisPairs/FINAL_STEP_2_NumberOfVariantCalls.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/MetastasisPairs/FINAL_STEP_4_MetricsScript.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/MetastasisPairs/FINAL_STEP_4_MetricsScript.R')
JaccardAcrossSamples_Plot
#for the scale only, to make a figure:
library(pheatmap)
pdf("HeatmapToGetTheLegendScale.pdf",onefile = F)
pheatmap(JaccardAcrossSamples[1:13,],color = JaccardColors)
dev.off()
write.csv(JaccardAcrossSamples_Plot,file="JaccardScores.csv")
getwd()
source('~/Desktop/Github_PDACDiseaseModels/SSM/MetastasisPairs/FINAL_STEP_4_MetricsScript.R')
JaccardAcrossSamples_Plot
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
write.csv(JaccardAcrossSamples_Plot,file="JaccardScores.csv")
JaccardAcrossSamples_Plot
write.csv(JaccardAcrossSamples_Plot,file="JaccardScores.csv")
pdf("JaccardScores_MutationCategories_Reduced.pdf")
par(mar=c(8,4,2,20)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
dev.off()
#c('#ffffff','#8c510a','#dfc27d','#c7eae5','#35978f')
pdf("JaccardScores_MutationCategories_Reduced.pdf")
par(mar=c(8,4,2,20)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
# heatmap.2( JaccardAcrossSamples_Plot,
#            col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
#            trace = "none", key = NA,
#            scale = c("none"),
#            symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
#            na.color="white",
#            cexRow = 0.75, cexCol = 0.75,
#            Colv = FALSE,Rowv = FALSE )
dev.off()
#c('#ffffff','#8c510a','#dfc27d','#c7eae5','#35978f')
source('~/Desktop/Github_PDACDiseaseModels/SSM/MetastasisPairs/FINAL_STEP_4_MetricsScript.R')
pdf("JaccardScores_MutationCategories_Reduced.pdf")
par(mar=c(8,4,2,20)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
dev.off()
#c('#ffffff','#8c510a','#dfc27d','#c7eae5','#35978f')
save.image("SSM_Calculations.RData")
getwd()
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(vcfR)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
stringAsFactors=FALSE
#########################
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
JaccardColors<-c('#ffffff',rev(c('#a50026','#d73027','#f46d43','#fdae61','#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837')))
stringAsFactors=FALSE
################################
# COMBINE ALL THE DATA FIRST
################################
load("PrimaryPDXInfo.RData")
TSVs<-sort(list.files(pattern = ".tsv"))
TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
names(TSVList)<-TSVs
COMBO<-NULL
for(Sample in 1:length(TSVList))
{
COMBO[[Sample]]<-cbind(AlleleCounts[[Sample]],TSVList[[Sample]])
}
names(COMBO)<-names(AlleleCounts)
load("PrimaryPDXInfo.RData")
getwd()
TSVs<-sort(list.files(pattern = ".tsv"))
TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
save(TSVs,TSVList,file="TSV.RData")
getwd()
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
stringAsFactors=FALSE
load("PrimaryPDXInfo.RData")
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(AlleleCounts[[count]]$VariantMutations,AlleleCounts[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(AlleleCounts[[count]])
PDXVariants<-nrow(AlleleCounts[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(AlleleCounts),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
#Convert to a 'plottable'
#Convert to a 'plottable' matrix
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
df
#Split the data based on the obvious outlier samples, versus the rest
#Outlier samples have the greatest number of variant calls!
HighOutliers<-df[,c("PCSI_0489")]
HighOutliers<-data.frame("PCSI_0489"=HighOutliers)
HighOutliers$Dummy<-c(50000,50000,50000)
HighOutliers$Dummy2<-c(50000,50000,50000)
HighOutliers$Dummy3<-c(50000,50000,50000)
HighOutliers$Dummy4<-c(50000,50000,50000)
HighOutliers<-as.matrix(HighOutliers)
LowNormals<-df[,c(!colnames(df)%in%c("PCSI_0489"))]
#PLOT EACH OF THE PAIRS ON A SEPER
quartz()
par(mar=c(8,4,2,2),mfrow=c(1,2)) #bottom, L, top, R
barplot(LowNormals,beside = T,col=c("#ffffbf","#d53e4f","#2b83ba"),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample")
abline(h = 1000,col='red',lty=5,lwd=2)
legend("topleft",c("PDX","Tumour","Common"),fill = c("#d53e4f","#ffffbf","#2b83ba"),horiz = T)
barplot(HighOutliers,beside = T,col=c("#ffffbf","#d53e4f","#2b83ba"),xlab="PCSI_0489",
cex.axis=0.6,las=2,ylab="Number of Variant Calls Per Sample",font=2)
abline(h = 1000,col='red',lty=5,lwd=2)
# !! Show the common variants and the variants only specific to either PDX or specific to tumour!!
df[1,]<-df[1,]-df[3,]
df[2,]<-df[2,]-df[3,]
#Split the data based on the obvious outlier samples, versus the rest
#Outlier samples have the greatest number of variant calls!
HighOutliers<-df[,c("PCSI_0489")]
HighOutliers<-data.frame("PCSI_0489"=HighOutliers)
HighOutliers$Dummy<-c(50000,50000,50000)
HighOutliers$Dummy2<-c(50000,50000,50000)
HighOutliers$Dummy3<-c(50000,50000,50000)
HighOutliers$Dummy4<-c(50000,50000,50000)
HighOutliers<-as.matrix(HighOutliers)
LowNormals<-df[,c(!colnames(df)%in%c("PCSI_0489"))]
LowNorm<-rbind(LowNormals[3,],LowNormals[1,],LowNormals[2,])
rownames(LowNorm)<-c("Common","Primary","Xenograft")
HighNorm<-rbind(HighOutliers[3,],HighOutliers[1,],HighOutliers[2,])
rownames(HighNorm)<-c("Common","Primary","Xenograft")
par(mar=c(8,4,2,2),mfrow=c(1,2)) #bottom, L, top, R
barplot(LowNorm,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,8000))
legend("topleft",c("Common","Tumour","PDX"),fill = rev(c("#d53e4f","#ffffbf","#2b83ba")),horiz = F)
barplot(HighNorm,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,51000))
############################################################################################
library(GenVisR)
load("TSV.RData")
#TSVs<-sort(list.files(pattern = ".tsv"))
#TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
TSVs<-gsub(TSVs,pattern = "_Lv",replacement="")
TSVs<-gsub(TSVs,pattern = "PCSI_",replacement="")
names(TSVList)<-TSVs
lapply(TSVList,function(x){table((x)$variant_classification)})
lapply(TSVList,function(x){names(table((x)$variant_classification))})
Categories<-unique(unlist(lapply(TSVList,function(x){names(table((x)$variant_classification))})))
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
for (Sample in 1:length(TSVList))
{
TSVList[[Sample]]$Tumor_Sample_Barcode<-TSVs[Sample]
colnames(TSVList[[Sample]])[81]<-"Hugo_Symbol"
colnames(TSVList[[Sample]])[23]<-"Variant_Classification"
colnames(TSVList[[Sample]])[89]<-"Reference_Allele"
}
ALL_MUTATIONS<-do.call(rbind,TSVList)
ALL_MUTATIONS<-ALL_MUTATIONS[!ALL_MUTATIONS$Variant_Classification%in%c("De_novo_Start_OutOfFrame","Start_Codon_SNP","De_novo_Start_InFrame","lincRNA"),]
quartz()
waterfall(ALL_MUTATIONS, plotGenes = c("ARID1A","KRAS","TP53","KDM6A","MAP2K4","SMAD4","RNF43","CDKN2A","TGFBR2"),
mainXlabel = T,mainDropMut = T,sampOrder =c("0489_M","0489_X","0491_M","0491_X",
"0585_M","0585_X","0604_M","0604_X",
"0605_M","0605_X","0606_M","0606_X"),geneOrder = T)
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
#JaccardColors<-c('#ffffff','#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')
#JaccardColors<-c('#ffffff','#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd')
JaccardColors<-c('#ffffff',rev(c('#a50026','#d73027','#f46d43','#fdae61','#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837')))
stringAsFactors=FALSE
#####################
#Load the parsed VCF files (including Annovar Annotation)
load("PrimaryPDXInfo.RData")
load("TSV.RData")
# Read all TSVs for Oncotator
#TSVs<-sort
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
#JaccardColors<-c('#ffffff','#ffffd9','#edf8b1','#c7e9b4','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58')
#JaccardColors<-c('#ffffff','#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd')
JaccardColors<-c('#ffffff',rev(c('#a50026','#d73027','#f46d43','#fdae61','#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837')))
stringAsFactors=FALSE
################################
# COMBINE ALL THE DATA FIRST
################################
#Load the parsed VCF files (including Annovar Annotation)
load("PrimaryPDXInfo.RData")
load("TSV.RData")
# Read all TSVs for Oncotator
#TSVs<-sort(list.files(pattern = ".tsv"))
#TSVList<-lapply(TSVs,f
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
names(TSVList)<-TSVs
names(TSVList)
#COMBINE ALL THE INFO FROM THE VCFs AND ONCOTATOR
COMBO<-NULL
for(Sample in 1:length(TSVList))
{
COMBO[[Sample]]<-cbind(AlleleCounts[[Sample]],TSVList[[Sample]])
}
names(COMBO)<-names(AlleleCounts)
################################
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(COMBO[[count]]$VariantMutations,COMBO[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(COMBO[[count]])
PDXVariants<-nrow(COMBO[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(COMBO),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
#Convert to a 'plottable' matrix
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
df
#Get list of all mutation categories: all types of variant classifications that have been called across all samples
lapply(COMBO,function(x){table((x)$variant_classification)})
lapply(COMBO,function(x){names(table((x)$variant_classification))})
Categories<-unique(unlist(lapply(COMBO,function(x){names(table((x)$variant_classification))})))
#Find all the mutation calls pertaining to each category, for every sample
ComboSub<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
ComboSub[[CategoryCount]]<-lapply(COMBO,function(x){x[x$variant_classification==Categories[CategoryCount],]})
}
#List of pairs and the variant counts
PrimPDXCountsMutCategory<-NULL
PrimPDXCountsMut<-NULL
MutProf<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
#Load the subbed VCFs for a given mutation category type
MutProf<-ComboSub[[CategoryCount]]
# Traverse the files to generate list of common, Prim-specific, PDX specific across all samples
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(MutProf[[count]]$VariantMutations,MutProf[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(MutProf[[count]])
PDXVariants<-nrow(MutProf[[count+1]])
PrimPDXCountsMut[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(MutProf),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCountsMut)<-SampleNames
#Convert to a 'plottable' matrix
df.temp <- data.frame(matrix(unlist(PrimPDXCountsMut), nrow=length(PrimPDXCountsMut), byrow=T))
rownames(df.temp)<-SampleNames
colnames(df.temp)<-c("Primary","PDX","Common")
df.temp<-as.matrix(df.temp)
df.temp<-t(df.temp)
PrimPDXCountsMutCategory[[CategoryCount]]<-df.temp
}
names(PrimPDXCountsMutCategory)<-Categories
#Add the counts for the generic mutation calls across all categories
PrimPDXCountsMutCategory$ALL_MUTATIONS<-df
# #Se
#Calculate Jaccard Index - easier to see?
JaccardAcrossSamples<-NULL
for(count in 1:length(PrimPDXCountsMutCategory))
{
TempMat<-PrimPDXCountsMutCategory[[count]]
JaccardAcrossSamples[[count]]<-apply(TempMat,2,function(x){x["Common"]/((x["Primary"]+x["PDX"])-x["Common"])})
}
names(JaccardAcrossSamples)<-names(PrimPDXCountsMutCategory)
#Convert to a 'plottable' matrix
df.temp <- data.frame(matrix(unlist(JaccardAcrossSamples), nrow=length(JaccardAcrossSamples), byrow=T))
rownames(df.temp)<-names(JaccardAcrossSamples)
colnames(df.temp)<-colnames(PrimPDXCountsMutCategory[[count]])
JaccardAcrossSamples<-df.temp
JaccardAcrossSamples<-as.matrix(JaccardAcrossSamples)
df.temp<-t(df.temp)
#OPTIONAL: R
#Reorder Rows???
JaccardAcrossSamples_Plot<-JaccardAcrossSamples[c(9,10,3,8,1,6,7,11,12,13,4,5,2,14,15),]
rownames(JaccardAcrossSamples_Plot)<-c("Missense","Nonsense","5'UTR","lincRNA","3'UTR","IGR","Intron",
"RNA","Silent","Splite_Site","De_novo_Start_InFrame","De_novo_Start_OutOfFrame","5'Flank","Start_Codon_SNP","ALL MUTATIONS")
# Reorder Columns for samples
JaccardAcrossSamples_Plot<-JaccardAcrossSamples_Plot[,c(2:6,1)]
quartz()
par(mar=c(8,4,2,20)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "LIVER",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
