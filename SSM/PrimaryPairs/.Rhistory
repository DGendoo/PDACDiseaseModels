# Read all VCFs using vcfR
VCFs<-sort(list.files(pattern = ".final.vcf"))
VcfListUsingVCFR<-lapply(VCFs,function(x){read.vcfR(x)})
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = ".final.vcf", replacement = ""))
names(VcfListUsingVCFR)<-VCFs
# Get alleleic counts for total number of reads (DP) plus the counts for each allele
AlleleCounts<-NULL
for (count in 1:length(VcfList))
{
message("Processing file: ",names(VcfList[count]))
REF<-VcfList[[count]]@fixed$REF
REF<-as.character(REF)
test<-(VcfList[[count]]@fixed$ALT)
test2<-lapply(test, as.character)
ALT<-sapply(test2, `[`,1) #split the comma string, take first element!
ReadDepth<-geno(VcfList[[count]])$DP[,2]
GU<-geno(VcfList[[count]])$GU[,,1][,2]
AU<-geno(VcfList[[count]])$AU[,,1][,2]
CU<-geno(VcfList[[count]])$CU[,,1][,2]
TU<-geno(VcfList[[count]])$TU[,,1][,2]
VariantMetadata<-data.frame(VcfList[[count]]@rowRanges)
Chromosome<-VariantMetadata$seqnames
PositionOfVariant<-VariantMetadata$start
VariantMutations<-paste(Chromosome,PositionOfVariant,REF,ALT,sep = ":")
GeneName<-as.character(as.vector(VcfList[[count]]@info$GENE))
GeneName[GeneName=="character(0)"]<-"non_coding"
tester<-list(matrix(VcfListUsingVCFR[[count]]@fix[,"INFO"]))
tester<-tester[[1]]
test <-sapply(X = tester,FUN = function(SNV){strsplit(strsplit(SNV,'ANNOVAR=')[[1]][2],';')[[1]][1]})
AnnovarCall<-as.character(matrix(lapply(test,FUN = function(snv2){strsplit(snv2,split = "\\,")[[1]][1]}))) #Annovar Call
AnnovarGene<-as.character(matrix(lapply(test,FUN = function(snv3){strsplit(snv3,split = "\\,")[[1]][2]}))) #Annovar Gene
Collated<-data.frame(cbind(REF,ALT,ReadDepth,AU,CU,GU,TU,GeneName,
VariantMutations,AnnovarCall,AnnovarGene),stringsAsFactors = FALSE)
Collated<-Collated[!is.na(Collated[,4]),]
SNVfreqList<-NULL
for(variant in 1:nrow(Collated))
{
if(Collated[variant,"ALT"] =="A"){SNVfreq<-as.numeric(Collated[variant,"AU"])/as.numeric(Collated[variant,"ReadDepth"])}
if(Collated[variant,"ALT"] =="C"){SNVfreq<-as.numeric(Collated[variant,"CU"])/as.numeric(Collated[variant,"ReadDepth"])}
if(Collated[variant,"ALT"] =="G"){SNVfreq<-as.numeric(Collated[variant,"GU"])/as.numeric(Collated[variant,"ReadDepth"])}
if(Collated[variant,"ALT"] =="T"){SNVfreq<-as.numeric(Collated[variant,"TU"])/as.numeric(Collated[variant,"ReadDepth"])}
SNVfreqList[variant]<-SNVfreq
}
AlleleCounts[[count]]<-data.frame(cbind(Collated,SNVfreq=SNVfreqList),stringsAsFactors = FALSE)
}
names(AlleleCounts)<-names(VcfList)
save(AlleleCounts,file="PrimaryPDXInfo.RData")
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
JaccardColors<-c('#ffffff',rev(c('#a50026','#d73027','#f46d43','#fdae61','#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837')))
stringAsFactors=FALSE
################################
# COMBINE ALL THE DATA F
load("PrimaryPDXInfo.RData")
# Read all TSVs for Oncotator
TSVs<-sort(list.files(pattern = ".tsv"))
TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
names(TSVList)<-TSVs
#COMBINE ALL THE INFO FROM THE VCFs AND ONCOTATOR
COMBO<-NULL
for(Sample in 1:length(TSVList))
{
COMBO[[Sample]]<-cbind(AlleleCounts[[Sample]],TSVList[[Sample]])
}
names(COMBO)<-names(AlleleCounts)
length(AlleleCounts)
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(COMBO[[count]]$VariantMutations,COMBO[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(COMBO[[count]])
PDXVariants<-nrow(COMBO[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename
PrimPDXCounts
str(COMBO)
str(COMBO[[1]],3)
#Load the parsed VCF files (including Annovar Annotation)
load("PrimaryPDXInfo.RData")
# Read all TSVs for Oncotator
TSVs<-sort(list.files(pattern = ".tsv"))
TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
names(TSVList)<-TSVs
#COMBINE ALL THE INFO FROM THE VCFs AND ONCOTATOR
COMBO<-NULL
for(Sample in 1:length(TSVList))
{
COMBO[[Sample]]<-cbind(AlleleCounts[[Sample]],TSVList[[Sample]])
}
names(COMBO)<-names(AlleleCounts)
View(COMBO[[1]])
View(TSV[[1]])
View(TSVList[[1]])
View(AlleleCounts[[1]])
names(AlleleCounts)
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(COMBO[[count]]$VariantMutations,COMBO[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(COMBO[[count]])
PDXVariants<-nrow(COMBO[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
PrimPDXCounts
#Rename VCF list & Counts
VCFs<-sapply(names(COMBO),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
PrimPDXCounts
#Convert to a 'plottable' matrix
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
#Get list of all mutation categories: all types of variant classifications that have been called across all samples
lapply(COMBO,function(x){table((x)$variant_classification)})
lapply(COMBO,function(x){names(table((x)$variant_classification))})
Categories<-unique(unlist(lapply(COMBO,function(x){names(table((x)$variant_classification))})))
#Find all
#Find all the mutation calls pertaining to each category, for every sample
ComboSub<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
ComboSub[[CategoryCount]]<-lapply(COMBO,function(x){x[x$variant_classification==Categories[CategoryCount],]})
}
ComboSub[[1]]
table(COMBO[[1]]$variant_classification)
apply(nrow,ComboSub[[1]])
lapply(nrow,ComboSub[[1]])
apply(nrow,ComboSub[[1]])
apply(nrow,ComboSub[[1]]$PCSI_0169_Pa_P$variant_classification)
names(ComboSub)
length(Categories)
ComboSub[[1]]$PCSI_0169_Pa_P
#List of pairs and the variant counts
PrimPDXCountsMutCategory<-NULL
PrimPDXCountsMut<-NULL
MutProf<-NULL
length(Categories)
head(ComboSub[[1]])
View(ComboSub[[1]])
length(ComboSub)
CategoryCount=1
MutProf<-ComboSub[[CategoryCount]]
length(MutProf)
# Traverse the files to generate list of common, Prim-specific, PDX specific across all samples
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(MutProf[[count]]$VariantMutations,MutProf[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(MutProf[[count]])
PDXVariants<-nrow(MutProf[[count+1]])
PrimPDXCountsMut[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VC
PrimPDXCountsMut
#List of pairs and the variant counts
PrimPDXCountsMutCategory<-NULL
PrimPDXCountsMut<-NULL
MutProf<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
#Load the subbed VCFs for a given mutation category type
MutProf<-ComboSub[[CategoryCount]]
# Traverse the files to generate list of common, Prim-specific, PDX specific across all samples
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(MutProf[[count]]$VariantMutations,MutProf[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(MutProf[[count]])
PDXVariants<-nrow(MutProf[[count+1]])
PrimPDXCountsMut[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(MutProf),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCountsMut)<-SampleNames
#Convert to a 'plottable' matrix
df.temp <- data.frame(matrix(unlist(PrimPDXCountsMut), nrow=length(PrimPDXCountsMut), byrow=T))
rownames(df.temp)<-SampleNames
colnames(df.temp)<-c("Primary","PDX","Common")
df.temp<-as.matrix(df.temp)
df.temp<-t(df.temp)
PrimPDXCountsMutCategory[[CategoryCount]]<-df.temp
}
names(PrimPDXCountsMutCategory)<-Categories
PrimPDXCountsMutCategory
PrimPDXCountsMutCategory$ALL_MUTATIONS<-df
#Calculate Jaccard Index
JaccardAcrossSamples<-NULL
for(count in 1:length(PrimPDXCountsMutCategory))
{
TempMat<-PrimPDXCountsMutCategory[[count]]
JaccardAcrossSamples[[count]]<-apply(TempMat,2,function(x){x["Common"]/((x["Primary"]+x["PDX"])-x["Common"])})
}
names(JaccardAcrossSamples)<-names(PrimPDXCountsMutCategory)
#Convert to a 'plottable' matrix
df.temp <- data.frame(matrix(unlist(JaccardAcrossSamples), nrow=length(JaccardAcrossSamples), byrow=T))
rownames(df.temp)<-names(JaccardAcrossSamples)
colnames(df.temp)<-colnames(PrimPDXCountsMutCategory[[count]])
JaccardAcrossSamples<-df.temp
JaccardAcrossSamples<-as.matrix(JaccardAcrossSamples)
df.temp<-t(df.temp)
JaccardAcrossSamples_Plot<-JaccardAcrossSamples[c(6,7,2,5,1,3,4,8,9,10,11,12,13),]
rownames(JaccardAcrossSamples_Plot)<-c("Missense","Nonsense","5'UTR","lincRNA","3'UTR","IGR","Intron",
"RNA","Silent","Splite_Site","De_novo_Start_InFrame","De_novo_Start_OutOfFrame","ALL MUTATIONS")
quartz()
par(mar=c(6,8,6,25)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot[1:12,],
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "PDAC",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "PDAC",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
############################################################################################
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(vcfR)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
stringAsFactors=FALSE
######################################################################
# Look at Variant Allele Frequency (VAF) for a given pair
######################################################################
# Read all VCFs
VCFs<-sort(list.files(pattern = ".final.vcf"))
VcfList<-lapply(VCFs,function(x){readVcf(x,genome="hg19")})
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = ".final.vcf", replacement = ""))
names(VcfList)<-VCFs
names(VcfList)<-gsub(x = names(VcfList),pattern = "_526",replacement = "" )
VCFs<-sort(list.files(pattern = ".final.vcf"))
VcfListUsingVCFR<-lapply(VCFs,function(x){read.vcfR(x)})
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = ".final.vcf", replacement = ""))
names(VcfListUsingVCFR)<-VCFs
# Get alleleic counts for total number of reads (DP) plus the counts for each allele
AlleleCounts<-NULL
for (count in 1:length(VcfList))
{
message("Processing file: ",names(VcfList[count]))
REF<-VcfList[[count]]@fixed$REF
REF<-as.character(REF)
test<-(VcfList[[count]]@fixed$ALT)
test2<-lapply(test, as.character)
ALT<-sapply(test2, `[`,1) #split the comma string, take first element!
ReadDepth<-geno(VcfList[[count]])$DP[,2]
GU<-geno(VcfList[[count]])$GU[,,1][,2]
AU<-geno(VcfList[[count]])$AU[,,1][,2]
CU<-geno(VcfList[[count]])$CU[,,1][,2]
TU<-geno(VcfList[[count]])$TU[,,1][,2]
VariantMetadata<-data.frame(VcfList[[count]]@rowRanges)
Chromosome<-VariantMetadata$seqnames
PositionOfVariant<-VariantMetadata$start
VariantMutations<-paste(Chromosome,PositionOfVariant,REF,ALT,sep = ":")
GeneName<-as.character(as.vector(VcfList[[count]]@info$GENE))
GeneName[GeneName=="character(0)"]<-"non_coding"
tester<-list(matrix(VcfListUsingVCFR[[count]]@fix[,"INFO"]))
tester<-tester[[1]]
test <-sapply(X = tester,FUN = function(SNV){strsplit(strsplit(SNV,'ANNOVAR=')[[1]][2],';')[[1]][1]})
AnnovarCall<-as.character(matrix(lapply(test,FUN = function(snv2){strsplit(snv2,split = "\\,")[[1]][1]}))) #Annovar Call
AnnovarGene<-as.character(matrix(lapply(test,FUN = function(snv3){strsplit(snv3,split = "\\,")[[1]][2]}))) #Annovar Gene
Collated<-data.frame(cbind(REF,ALT,ReadDepth,AU,CU,GU,TU,GeneName,
VariantMutations,AnnovarCall,AnnovarGene),stringsAsFactors = FALSE)
Collated<-Collated[!is.na(Collated[,4]),]
SNVfreqList<-NULL
for(variant in 1:nrow(Collated))
{
if(Collated[variant,"ALT"] =="A"){SNVfreq<-as.numeric(Collated[variant,"AU"])/as.numeric(Collated[variant,"ReadDepth"])}
if(Collated[variant,"ALT"] =="C"){SNVfreq<-as.numeric(Collated[variant,"CU"])/as.numeric(Collated[variant,"ReadDepth"])}
if(Collated[variant,"ALT"] =="G"){SNVfreq<-as.numeric(Collated[variant,"GU"])/as.numeric(Collated[variant,"ReadDepth"])}
if(Collated[variant,"ALT"] =="T"){SNVfreq<-as.numeric(Collated[variant,"TU"])/as.numeric(Collated[variant,"ReadDepth"])}
SNVfreqList[variant]<-SNVfreq
}
AlleleCounts[[count]]<-data.frame(cbind(Collated,SNVfreq=SNVfreqList),stringsAsFactors = FALSE)
}
names(AlleleCounts)<-names(VcfList)
save(AlleleCounts,file="PrimaryPDXInfo.RData")
View(AlleleCounts[[1]])
# libraries
library(VariantAnnotation)
library(scales)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
stringAsFactors=FALSE
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(AlleleCounts[[count]]$VariantMutations,AlleleCounts[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(AlleleCounts[[count]])
PDXVariants<-nrow(AlleleCounts[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(AlleleCounts),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
PrimPDXCounts
#Convert to a 'plottable' matrix
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
write.csv(df,file="Number_SSM_Across_Pairs.csv")
df
quartz()
par(mar=c(8,4,6,2)) #bottom, L, top, R
barplot(df,beside = T,col=c("#d53e4f","#ffffbf","#2b83ba"),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,6000))
legend("topright",c("Tumour","PDX","Common"),fill = c("#d53e4f","#ffffbf","#2b83ba"),horiz = F)
test<-rbind(df[3,],df[1,],df[2,])
rownames(test)<-c("Common","Primary","Xenograft")
par(mar=c(8,4,6,2)) #bottom, L, top, R
barplot(test,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,20000))
legend("topright",c("Common","Tumour","PDX"),fill = rev(c("#d53e4f","#ffffbf","#2b83ba")),horiz = F)
df[1,]<-df[1,]-df[3,]
df[2,]<-df[2,]-df[3,]
test<-rbind(df[3,],df[1,],df[2,])
rownames(test)<-c("Common","Primary","Xenograft")
par(mar=c(12,4,6,2)) #bottom, L, top, R
barplot(test,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,8000))
legend("topright",c("Common","Tumour","PDX"),fill = rev(c("#d53e4f","#ffffbf","#2b83ba")),horiz = F)
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
JaccardColors<-c('#ffffff',rev(c('#a50026','#d73027','#f46d43','#fdae61','#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837')))
stringAsFactors=FALSE
# Read all TSVs for Oncotator
TSVs<-sort(list.files(pattern = ".tsv"))
TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
names(TSVList)<-TSVs
#COMBINE ALL THE
View(TSVList[[1]])
#COMBINE ALL THE INFO FROM THE VCFs AND ONCOTATOR
COMBO<-NULL
for(Sample in 1:length(TSVList))
{
COMBO[[Sample]]<-cbind(AlleleCounts[[Sample]],TSVList[[Sample]])
}
names(COMBO)<-names(AlleleCounts)
############
View(COMBO[[1]])
count=1
head(COMBO[[count]]$VariantMutations)
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(COMBO[[count]]$VariantMutations,COMBO[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(COMBO[[count]])
PDXVariants<-nrow(COMBO[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(COMBO),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
#Convert to a 'plottable' matrix
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
################################
# Look at %
df
lapply(COMBO,function(x){table((x)$variant_classification)})
lapply(COMBO,function(x){names(table((x)$variant_classification))})
Categories<-unique(unlist(lapply(COMBO,function(x){names(table((x)$variant_classification))})))
Categories
#Find all the mutation calls pertaining to each category, for every sample
ComboSub<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
ComboSub[[CategoryCount]]<-lapply(COMBO,function(x){x[x$variant_classification==Categories[CategoryCount],]})
}
#List of
#List of pairs and the variant counts
PrimPDXCountsMutCategory<-NULL
PrimPDXCountsMut<-NULL
MutProf<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
#Load the subbed VCFs for a given mutation category type
MutProf<-ComboSub[[CategoryCount]]
# Traverse the files to generate list of common, Prim-specific, PDX specific across all samples
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(MutProf[[count]]$VariantMutations,MutProf[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(MutProf[[count]])
PDXVariants<-nrow(MutProf[[count+1]])
PrimPDXCountsMut[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(MutProf),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCountsMut)<-SampleNames
#Convert to a 'plottable' matrix
df.temp <- data.frame(matrix(unlist(PrimPDXCountsMut), nrow=length(PrimPDXCountsMut), byrow=T))
rownames(df.temp)<-SampleNames
colnames(df.temp)<-c("Primary","PDX","Common")
df.temp<-as.matrix(df.temp)
df.temp<-t(df.temp)
PrimPDXCountsMutCategory[[CategoryCount]]<-df.temp
}
names(PrimPDXCountsMutCategory)<-Categories
#Add the counts for the generic mutation calls across all categories
PrimPDXCountsMutCategory$ALL_MUTATIONS<-df
str(PrimPDXCountsMutCategory,3)
#Calculate Jaccard Index
JaccardAcrossSamples<-NULL
for(count in 1:length(PrimPDXCountsMutCategory))
{
TempMat<-PrimPDXCountsMutCategory[[count]]
JaccardAcrossSamples[[count]]<-apply(TempMat,2,function(x){x["Common"]/((x["Primary"]+x["PDX"])-x["Common"])})
}
names(JaccardAcrossSamples)<-names(PrimPDXCountsMutCategory)
JaccardAcrossSamples
#Convert to a 'plottable' matrix
df.temp <- data.frame(matrix(unlist(JaccardAcrossSamples), nrow=length(JaccardAcrossSamples), byrow=T))
rownames(df.temp)<-names(JaccardAcrossSamples)
colnames(df.temp)<-colnames(PrimPDXCountsMutCategory[[count]])
JaccardAcrossSamples<-df.temp
JaccardAcrossSamples<-as.matrix(JaccardAcrossSamples)
df.temp<-t(df.temp)
df.temp
JaccardAcrossSamples_Plot<-JaccardAcrossSamples[c(6,7,2,5,1,3,4,8,9,10,11,12,13),]
rownames(JaccardAcrossSamples_Plot)<-c("Missense","Nonsense","5'UTR","lincRNA","3'UTR","IGR","Intron",
"RNA","Silent","Splite_Site","De_novo_Start_InFrame","De_novo_Start_OutOfFrame","ALL MUTATIONS")
quartz()
par(mar=c(6,8,6,25)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot[1:12,],
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "PDAC",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "PDAC",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
PrimPDXCountsMutCategory[[1]]
names(PrimPDXCountsMutCategory)
PrimPDXCountsMutCategory[[2]]
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_5_GenerateWaterfall.R')
getwd()
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_1_VAF_PrimPDXpairs.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_2_NumberOfVariantCalls.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_4_MetricsScript.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_2_NumberOfVariantCalls.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_2_NumberOfVariantCalls.R')
source('~/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/FINAL_STEP_4_MetricsScript.R')
JaccardAcrossSamples_Plot
write.csv(JaccardAcrossSamples_Plot,file="JaccardScores.csv")
