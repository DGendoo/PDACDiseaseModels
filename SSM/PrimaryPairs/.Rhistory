load("PrimaryPDXInfo.RData")
load("/Users/dgendoo/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/PrimaryPDXInfo.RData")
getwd()
setwd("/Users/dgendoo/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/PrimaryPDXInfo.RData")
setwd("/Users/dgendoo/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/")
# libraries
library(VariantAnnotation)
library(scales)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
stringAsFactors=FALSE
load("PrimaryPDXInfo.RData")
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(AlleleCounts[[count]]$VariantMutations,AlleleCounts[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(AlleleCounts[[count]])
PDXVariants<-nrow(AlleleCounts[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(AlleleCounts),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
TSVs<-sort(list.files(pattern = ".tsv"))
TSVList<-lapply(TSVs,function(x){read.delim(x,header=T,skip=2)})
save(TSV,TSVList,file="TSV.RData")
save.image(TSV,TSVList,file="TSV.RData")
save(TSVs,TSVList,file="TSV.RData")
load("/Users/dgendoo/Desktop/Github_PDACDiseaseModels/SSM/PrimaryPairs/TSV.RData")
getwd()
load("PrimaryPDXInfo.RData")
load("TSV.RData")
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
JaccardColors<-c('#ffffff',rev(c('#a50026','#d73027','#f46d43','#fdae61','#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837')))
stringAsFactors=FALSE
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
names(TSVList)<-TSVs
COMBO<-NULL
for(Sample in 1:length(TSVList))
{
COMBO[[Sample]]<-cbind(AlleleCounts[[Sample]],TSVList[[Sample]])
}
names(COMBO)<-names(AlleleCounts)
################################
# Look at % Overlap of Mutations across all calls
################################
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(COMBO[[count]]$VariantMutations,COMBO[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(COMBO[[count]])
PDXVariants<-nrow(COMBO[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
VCFs<-sapply(names(COMBO),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
############
df
################################
lapply(COMBO,function(x){table((x)$variant_classification)})
lapply(COMBO,function(x){names(table((x)$variant_classification))})
Categories<-unique(unlist(lapply(COMBO,function(x){names(table((x)$variant_classification))})))
ComboSub<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
ComboSub[[CategoryCount]]<-lapply(COMBO,function(x){x[x$variant_classification==Categories[CategoryCount],]})
}
PrimPDXCountsMutCategory<-NULL
PrimPDXCountsMut<-NULL
MutProf<-NULL
for (CategoryCount in 1:length(Categories))
{
message("Category assessed: ",Categories[CategoryCount])
MutProf<-ComboSub[[CategoryCount]]
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(MutProf[[count]]$VariantMutations,MutProf[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(MutProf[[count]])
PDXVariants<-nrow(MutProf[[count+1]])
PrimPDXCountsMut[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
VCFs<-sapply(names(MutProf),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCountsMut)<-SampleNames
df.temp <- data.frame(matrix(unlist(PrimPDXCountsMut), nrow=length(PrimPDXCountsMut), byrow=T))
rownames(df.temp)<-SampleNames
colnames(df.temp)<-c("Primary","PDX","Common")
df.temp<-as.matrix(df.temp)
df.temp<-t(df.temp)
PrimPDXCountsMutCategory[[CategoryCount]]<-df.temp
}
names(PrimPDXCountsMutCategory)<-Categories
PrimPDXCountsMutCategory$ALL_MUTATIONS<-df
JaccardAcrossSamples<-NULL
for(count in 1:length(PrimPDXCountsMutCategory))
{
TempMat<-PrimPDXCountsMutCategory[[count]]
JaccardAcrossSamples[[count]]<-apply(TempMat,2,function(x){x["Common"]/((x["Primary"]+x["PDX"])-x["Common"])})
}
names(JaccardAcrossSamples)<-names(PrimPDXCountsMutCategory)
df.temp <- data.frame(matrix(unlist(JaccardAcrossSamples), nrow=length(JaccardAcrossSamples), byrow=T))
rownames(df.temp)<-names(JaccardAcrossSamples)
colnames(df.temp)<-colnames(PrimPDXCountsMutCategory[[count]])
JaccardAcrossSamples<-df.temp
JaccardAcrossSamples<-as.matrix(JaccardAcrossSamples)
df.temp<-t(df.temp)
JaccardAcrossSamples_Plot<-JaccardAcrossSamples[c(6,7,2,5,1,3,4,8,9,10,11,12,13),]
rownames(JaccardAcrossSamples_Plot)<-c("Missense","Nonsense","5'UTR","lincRNA","3'UTR","IGR","Intron",
"RNA","Silent","Splite_Site","De_novo_Start_InFrame","De_novo_Start_OutOfFrame","ALL MUTATIONS")
quartz()
par(mar=c(6,8,6,25)) #bottom, L, top, R
par(mfrow=c(1,2))
heatmap.2( JaccardAcrossSamples_Plot[1:12,],
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "PDAC",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
heatmap.2( JaccardAcrossSamples_Plot,
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),main = "PDAC",
trace = "none", key = NA,
scale = c("none"),
symbreaks = min(JaccardAcrossSamples, na.rm=TRUE),
na.color="white",
cexRow = 0.75, cexCol = 0.75,
Colv = FALSE,Rowv = FALSE )
load("TSV.RData")
TSVs<-gsub(TSVs,pattern = ".snp.maf.txt.tsv",replacement = "")
TSVs<-gsub(TSVs,pattern = "_Pa",replacement="")
TSVs<-gsub(TSVs,pattern = "PCSI_",replacement="")
names(TSVList)<-TSVs
lapply(TSVList,function(x){table((x)$variant_classification)})
lapply(TSVList,function(x){names(table((x)$variant_classification))})
Categories<-unique(unlist(lapply(TSVList,function(x){names(table((x)$variant_classification))})))
CatColors<-c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928','black')
for (Sample in 1:length(TSVList))
{
TSVList[[Sample]]$Tumor_Sample_Barcode<-TSVs[Sample]
colnames(TSVList[[Sample]])[81]<-"Hugo_Symbol"
colnames(TSVList[[Sample]])[23]<-"Variant_Classification"
colnames(TSVList[[Sample]])[89]<-"Reference_Allele"
}
ALL_MUTATIONS<-do.call(rbind,TSVList)
ALL_MUTATIONS<-ALL_MUTATIONS[!ALL_MUTATIONS$Variant_Classification%in%c("De_novo_Start_OutOfFrame","Start_Codon_SNP","De_novo_Start_InFrame","lincRNA"),]
quartz()
waterfall(ALL_MUTATIONS, plotGenes = c("KRAS","TP53","CDKN2A", "SMAD4", "MAP2K4", "ARID1A", "RNF43", "TGFBR2", "KDM6A"),
mainXlabel = T,mainDropMut = T,sampOrder =c("0169_P","0169_X","0355_P","0355_X",
"0589_P","0589_X","0590_P","0590_X",
"0592_P","0592_X","0602_P","0602_X",
"0611_P","0611_X","0624_P","0624_X",
"0633_P","0633_X","0642_P","0642_X"))
library(GenVisR)
waterfall(ALL_MUTATIONS, plotGenes = c("KRAS","TP53","CDKN2A", "SMAD4", "MAP2K4", "ARID1A", "RNF43", "TGFBR2", "KDM6A"),
mainXlabel = T,mainDropMut = T,sampOrder =c("0169_P","0169_X","0355_P","0355_X",
"0589_P","0589_X","0590_P","0590_X",
"0592_P","0592_X","0602_P","0602_X",
"0611_P","0611_X","0624_P","0624_X",
"0633_P","0633_X","0642_P","0642_X"))
# libraries
library(VariantAnnotation)
library(scales)
ColTemplateDoubles<-c("#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462", "#b3de69",
"#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f","#1f78b4", "#e31a1c","#6a3d9a")
ColorListDoubles<-rep(ColTemplateDoubles, each=2) #30 colors of 15 pairs
ColTemplateTriples<-c("#edf8b1","#7fcdbb","#2c7fb8")
ColorListTriples<-rep(ColTemplateTriples,15) #30 colors of 15 pairs
stringAsFactors=FALSE
load("PrimaryPDXInfo.RData")
#List of pairs and the variant counts
PrimPDXCounts<-NULL
for (count in seq(1,length(AlleleCounts),2))
{
CommonVariants <- length(intersect(AlleleCounts[[count]]$VariantMutations,AlleleCounts[[count+1]]$VariantMutations))
PrimaryVariants<-nrow(AlleleCounts[[count]])
PDXVariants<-nrow(AlleleCounts[[count+1]])
PrimPDXCounts[[(count+1)/2]]<-cbind(Primary=PrimaryVariants,PDX=PDXVariants,Common=CommonVariants)
}
#Rename VCF list & Counts
VCFs<-sapply(names(AlleleCounts),function(x) gsub(x,pattern = "_Pa_[P,X].*", replacement = ""))
VCFs<-sapply(VCFs,function(x) gsub(x,pattern = "_Lv_[M,X].*", replacement = ""))
SampleNames<-sort(unique(VCFs))
names(PrimPDXCounts)<-SampleNames
#Convert to a 'plottable' matrix
df <- data.frame(matrix(unlist(PrimPDXCounts), nrow=length(PrimPDXCounts), byrow=T))
rownames(df)<-SampleNames
colnames(df)<-c("Primary","PDX","Common")
df<-as.matrix(df)
df<-t(df)
df
#Show the common variants and the variants only specific to either PDX or specific to tumour
df[1,]<-df[1,]-df[3,]
df[2,]<-df[2,]-df[3,]
test<-rbind(df[3,],df[1,],df[2,])
rownames(test)<-c("Common","Primary","Xenograft")
par(mar=c(12,4,6,2)) #bottom, L, top, R
barplot(test,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,8000))
legend("topright",c("Common","Tumour","PDX"),fill = rev(c("#d53e4f","#ffffbf","#2b83ba")),horiz = F)
par(mar=c(12,4,6,2)) #bottom, L, top, R
barplot(test,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,8000))
legend("topright",c("Common","Tumour","PDX"),fill = rev(c("#d53e4f","#ffffbf","#2b83ba")),horiz = F)
quartz()
par(mar=c(12,4,6,2)) #bottom, L, top, R
barplot(test,beside = F,col=rev(c("#d53e4f","#ffffbf","#2b83ba")),
cex.axis=0.6,las=2,font=2,ylab="Number of Variant Calls Per Sample",ylim=c(0,8000))
legend("topright",c("Common","Tumour","PDX"),fill = rev(c("#d53e4f","#ffffbf","#2b83ba")),horiz = F)
