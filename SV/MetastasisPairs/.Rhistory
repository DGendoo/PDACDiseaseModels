library(reshape2)
library(pheatmap) # '#d53e4f'
library(RCircos)
library(gplots)
library(copynumber)
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(vcfR)
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(scales)
library(pheatmap)
library(plotrix)
# http://rpackages.ianhowson.com/bioc/VariantAnnotation/man/VCF-class.html
library(VariantAnnotation)
library(VennDiagram)
library(scales)
library(gplots)
library(GenVisR)
sessionInfo()
sessionInfo()
###################################################################################################################
# color plotter:
tol21rainbow= c("#ffffff", "#CC99BB","#AA4488",   "#77AADD","#4477AA","#114477","#117777", "#44AAAA", "#77CCCC", "#117744", "#44AA77",
"#88CCAA", "#777711", "#AAAA44", "#DDDD77", "#774411", "#AA7744", "#DDAA77", "#771122", "#AA4455", "#DD7788")
###################################################################################################################
# Read all TSVs containing structural variation
TSVs<-sort(list.files(pattern = ".annotatedSV.tsv"))
TSVList<-lapply(TSVs,function(x){read.csv(x)})
TSVs<-sapply(TSVs,function(x) gsub(x,pattern = ".annotatedSV.tsv", replacement = ""))
names(TSVList)<-TSVs
names(TSVList)<-gsub(x = names(TSVList),pattern = "_526",replacement = "" )
#Rename TSV list to show the unique pair elements
TSVs<-sapply(TSVs,function(x){gsub(x,pattern = "_Pa_[P,X].*", replacement = "")})
TSVs<-sapply(TSVs,function(x){gsub(x,pattern = "_Lv_[M,X].*", replacement = "")})
SampleNames<-sort(unique(TSVs))
####################
###################################################################################################################
library(reshape2)
SV_Counts<-matrix(nrow=4,ncol=length(TSVs),data = NA)
rownames(SV_Counts)<-c("DEL","DUP","INV","TRA")
colnames(SV_Counts)<-gsub(names(TSVList),pattern = "_526.*",replacement = "")
colnames(SV_Counts)<-gsub(colnames(SV_Counts),pattern = "_Lv",replacement = "")
for (count in 1:length(TSVs))
{
message("Working on Sample #:",count)
SV_Counts["DEL",count]<-length(which(TSVList[[count]]$type == "DEL"))
SV_Counts["DUP",count]<-length(which(TSVList[[count]]$type == "DUP"))
SV_Counts["INV",count]<-length(which(TSVList[[count]]$type == "INV"))
SV_Counts["TRA",count]<-length(which(TSVList[[count]]$type == "TRA"))
}
#Quick formatting for figures!
ParamsTable<-as.matrix(do.call(cbind.data.frame, list(SV_Counts[,1:2],NA,SV_Counts[,3:4],NA,SV_Counts[,5:6],NA,
SV_Counts[,7:8],NA,SV_Counts[,9:10],NA,SV_Counts[,11:12])))
# Stacked barplot of total SV counts across all samples
pdf("SV_Counts_Total_Across_Samples.pdf",onefile = F,width = 10,height = 7)
par(mar=c(10,6,2,2)+0.2)
barplot(ParamsTable,col=c("#d73027","#2166ac","#66bd63","#542788"),las=2,ylab="Number of SV Events",names.arg = colnames(ParamsTable))
legend("topleft",c("Deletion","Duplication","Inversion","Translocation"),fill=c("#d73027","#2166ac","#66bd63","#542788"))
dev.off()
write.csv(SV_Counts,file="Total_SV_CountsPerSample.csv")
################
SV_Counts_Chrom<-matrix(nrow=length(TSVs),ncol=24,data = NA)
colnames(SV_Counts_Chrom)<-c(paste("chr",rep(1:22),sep = ""),"chrX","chrY")
rownames(SV_Counts_Chrom)<-gsub(names(TSVList),pattern = "_526.*",replacement = "")
rownames(SV_Counts_Chrom)<-gsub(rownames(SV_Counts_Chrom),pattern = "_Lv",replacement = "")
for (count in 1:length(TSVs))
{
message("Working on Sample #:",count)
Samplee<-TSVList[[count]]
Samplee$chr1<-factor(as.character(lapply(Samplee$chr1,function(x){strsplit(as.character(x),"_")[[1]][1]})))
Samplee$chr2<-factor(as.character(lapply(Samplee$chr2,function(x){strsplit(as.character(x),"_")[[1]][1]})))
for(chromcount in 1:24)
{
SV_Counts_Chrom[count,chromcount]<-(length(which(Samplee$chr1 == colnames(SV_Counts_Chrom)[chromcount]))
+length(which(Samplee$chr2 == colnames(SV_Counts_Chrom)[chromcount])))/2
}
}
# Stacked barplot of total SV counts across all samples
colorscheme<-c('#ffffff','#ffffd9','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#8dd3c7','#4d4d4d')
colorscheme2<-c('#ffffff','#fff7bc','#edf8b1','#d9f0a3','#addd8e','#7fcdbb','#41b6c4','#1d91c0','#225ea8','#253494','#081d58','#4d4d4d')
library(pheatmap) # '#d53e4f'
pdf("SV_Counts_PerChrom_Across_Samples.pdf",onefile = F)
pheatmap(SV_Counts_Chrom,color = tol21rainbow,cluster_rows = F,cluster_cols = F,gaps_row = c(0,2,4,6,8,10))
dev.off()
write.csv(SV_Counts_Chrom,"SV_Counts_PerChrom_Across_Samples_LIVER.csv")
source('~/Desktop/Github_PDACDiseaseModels/SV/MetastasisPairs/StructuralVariation_Metastasis_Pairs.R')
library(reshape2)
library(pheatmap)
chromList<-c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
######################################################################################################
# FIND ALL EVENTS PERTINENT TO TUMOUR, PDX, AS WELL AS COMMON EVENTS FOR A TUMOUR-PDX PAIR
######################################################################################################
# Read all TSVs containing structural variation events for TUMOUR
TSVs<-sort(list.files(pattern = "_Lv_M_526.annotatedSV.tsv"))
TSVList<-lapply(TSVs,function(x){read.csv(x,header = T)})
TSVs<-sapply(TSVs,function(x) gsub(x,pattern = "_Lv_M_526.annotatedSV.tsv", replacement = ""))
names(TSVList)<-TSVs
TUMOUR<-TSVList
SampleNames<-sort(unique(TSVs))
unlist(lapply(TSVList,nrow))
TumourSV<-melt(lapply(TSVList,nrow))$value
28+22+56+66
# Read all TSVs containing structural variation events for XENOGRAFT
TSVs<-sort(list.files(pattern = "_Lv_X_526.annotatedSV.tsv"))
TSVList<-lapply(TSVs,function(x){read.csv(x,header = T)})
TSVs<-sapply(TSVs,function(x) gsub(x,pattern = "_Lv_X_526.annotatedSV.tsv", replacement = ""))
names(TSVList)<-TSVs
SampleNames<-sort(unique(TSVs))
XENOGRAFT<-TSVList
unlist(lapply(TSVList,nrow))
XenoSV<-melt(lapply(TSVList,nrow))$value
CommonSV<-CommonCalls<-COMMON<-NULL
for(count in 1:length(TSVs))
{
Tumour<-TUMOUR[[count]]
PDX<-XENOGRAFT[[count]]
PDXsv<-paste(PDX$chr1,":",PDX$pos1,"-",PDX$chr2,":",PDX$pos2,sep="")
Tumoursv<-paste(Tumour$chr1,":",Tumour$pos1,"-",Tumour$chr2,":",Tumour$pos2,sep="")
CommonCalls[[count]]<-intersect(Tumoursv,PDXsv)
Tumoursv[!(Tumoursv%in%CommonCalls[[count]])]
PDXsv[!(PDXsv%in%CommonCalls[[count]])]
COMMON[[count]]<-Tumour[(Tumour$chr1%in%PDX$chr1 & Tumour$chr2%in%PDX$chr2 & Tumour$pos1%in%PDX$pos1 & Tumour$pos2%in%PDX$pos2),]
}
names(COMMON)<-names(TUMOUR)
CommonSV<-unlist(lapply(CommonCalls,length))
all(unlist(lapply(COMMON,nrow)) == CommonSV)
Tumour_TSVList_ByChr<-NULL
for(count in 1:length(TUMOUR))
{
Sample<-TUMOUR[[count]]
ChrCounts<-NULL
for(counter in 1:length(chromList))
{
ChrCounts[counter]<-(length(which(Sample$chr1 %in% chromList[counter]))+length(which(Sample$chr2 %in% chromList[counter])))/2
}
Tumour_TSVList_ByChr[[count]]<-ChrCounts
}
Tumour_TSVList_ByChr<-data.frame(matrix(unlist(Tumour_TSVList_ByChr), nrow=6, byrow=T))
rownames(Tumour_TSVList_ByChr)<-names(TUMOUR)
colnames(Tumour_TSVList_ByChr)<-chromList
Xeno_TSVList_ByChr<-NULL
for(count in 1:length(XENOGRAFT))
{
Sample<-XENOGRAFT[[count]]
ChrCounts<-NULL
for(counter in 1:length(chromList))
{
ChrCounts[counter]<-(length(which(Sample$chr1 %in% chromList[counter]))+length(which(Sample$chr2 %in% chromList[counter])))/2
}
Xeno_TSVList_ByChr[[count]]<-ChrCounts
}
Xeno_TSVList_ByChr<-data.frame(matrix(unlist(Xeno_TSVList_ByChr), nrow=6, byrow=T))
rownames(Xeno_TSVList_ByChr)<-names(XENOGRAFT)
colnames(Xeno_TSVList_ByChr)<-chromList
Common_TSVList_ByChr<-NULL
for(count in 1:length(COMMON))
{
Sample<-COMMON[[count]]
ChrCounts<-NULL
for(counter in 1:length(chromList))
{
ChrCounts[counter]<-(length(which(Sample$chr1 %in% chromList[counter]))+length(which(Sample$chr2 %in% chromList[counter])))/2
}
Common_TSVList_ByChr[[count]]<-ChrCounts
}
Common_TSVList_ByChr<-data.frame(matrix(unlist(Common_TSVList_ByChr), nrow=6, byrow=T))
rownames(Common_TSVList_ByChr)<-names(COMMON)
colnames(Common_TSVList_ByChr)<-chromList
Jaccard_By_Chr<-NULL
for(sample in 1:length(COMMON))
{
Xeno<-Xeno_TSVList_ByChr[sample,]
Tumour<-Tumour_TSVList_ByChr[sample,]
Common<-Common_TSVList_ByChr[sample,]
ChrJaccard<-NULL
for(count in 1:length(chromList))
{
ChrJaccard[count]<-Common[count]/((Tumour[count]+Xeno[count])-Common[count])
}
Jaccard_By_Chr[[sample]]<-ChrJaccard
}
Jaccard_By_Chr<-do.call(cbind,Jaccard_By_Chr)
Jaccard_By_Chr2<- data.frame(matrix(unlist(Jaccard_By_Chr), ncol=6, byrow=F))
Jaccard_By_Chr2[is.na(Jaccard_By_Chr2)]<-(-0.01)
Jaccard_By_Chr<-data.frame(Jaccard_By_Chr)
rownames(Jaccard_By_Chr2)<-chromList
colnames(Jaccard_By_Chr2)<-names(COMMON)
pdf(file="Plot_Jaccard_By_Chr.pdf",width=25,height = 7)
barplot(as.matrix(Jaccard_By_Chr2),beside = T,col = rainbow(24))
#abline(h = 1,col="red")
dev.off()
Jaccard_By_Chr2[Jaccard_By_Chr2<0]<-NA
colnames(Jaccard_By_Chr2)<-gsub(colnames(Jaccard_By_Chr2),pattern = "PCSI_",replacement = "")
library(gplots)
pdf("Jaccard_By_Chr_LIVER_Heatmap.pdf",height = 4,width = 12)
heatmap.2(as.matrix(t(Jaccard_By_Chr2)),Rowv = F,Colv = F,trace = "none",na.color = "white",
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),sepcolor = "black",tracecol = "white")
dev.off()
library(gplots)
pdf("Jaccard_By_Chr_LIVER_Heatmap2.pdf",height = 12,width = 4)
heatmap.2(as.matrix((Jaccard_By_Chr2)),Rowv = F,Colv = F,trace = "none",na.color = "white",
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'),sepcolor = "black",tracecol = "white")
dev.off()
write.csv(round(Jaccard_By_Chr2,3),file="Jaccard_By_Chr_PDAC.csv")
SampleScore<-NULL
for(sample in 1:ncol(Jaccard_By_Chr2))
{
SampleTested<-Jaccard_By_Chr2[,sample]
Empty<-length(which(is.na(SampleTested)))
TotalCategories<-(24-Empty)
Positive<-length(which(SampleTested>=0.6))
SampleScore[sample]<-Positive/TotalCategories
}
names(SampleScore)<-colnames(Jaccard_By_Chr2)
pdf("Sc_Score_Plotting.pdf")
heatmap.2(as.matrix(t(rbind(SampleScore,SampleScore,Jaccard_By_Chr2))),Rowv = F,Colv = F,trace = "none",na.color = "white",
col = c('#543005','#8c510a','#dfc27d','#c7eae5','#35978f'))
dev.off()
#See which chromosomes have >=5 SV events in both tumour and PDX
test<-Tumour_TSVList_ByChr>=5 & Xeno_TSVList_ByChr>=5
test[test=="FALSE"]<-""
test
#Discordant Chromosomes
tester<-abs(Tumour_TSVList_ByChr - Xeno_TSVList_ByChr)>=10
tester[tester=="FALSE"]<-""
tester
source('~/Desktop/Github_PDACDiseaseModels/SV/MetastasisPairs/StructuralVariation_Metastasis_Pairs.R')
source('~/Desktop/Github_PDACDiseaseModels/SV/MetastasisPairs/CalculateJaccardSV_Metastasis_Pairs.R')
SampleScore
message("Sample Score: \n")
data.frame(SampleScore)
test
source('~/Desktop/Github_PDACDiseaseModels/SV/MetastasisPairs/StructuralVariation_Metastasis_Pairs.R')
source('~/Desktop/Github_PDACDiseaseModels/SV/MetastasisPairs/CalculateJaccardSV_Metastasis_Pairs.R')
